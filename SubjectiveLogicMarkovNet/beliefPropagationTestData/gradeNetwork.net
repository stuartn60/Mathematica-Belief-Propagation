net
{
	propagationenginegenerator1791944048146838126L = "edu.ucla.belief.approx.BeliefPropagationSettings@ece4b36";
	recoveryenginegenerator6944530267470113528l = "edu.ucla.util.SettingsImpl@6a5b6eb5";
	jenginegenerator6060830225489488864L = "edu.ucla.belief.inference.JoinTreeSettings@63f96596";
	node_size = (130.0 55.0);
	huginenginegenerator3061656038650325130L = "edu.ucla.belief.inference.JoinTreeSettings@7f46f17e";
}

node Intelligence
{
	states = ("state0" "state1" );
	position = (177 1);
	diagnosistype = "AUXILIARY";
	DSLxSUBMODEL = "Root Submodel";
	ismapvariable = "false";
	ID = "variable1";
	label = "Intelligence";
	DSLxEXTRA_DEFINITIONxDIAGNOSIS_TYPE = "AUXILIARY";
	excludepolicy = "include whole CPT";
}
node Difficulty
{
	states = ("state0" "state1" );
	position = (17 2);
	diagnosistype = "AUXILIARY";
	DSLxSUBMODEL = "Root Submodel";
	ismapvariable = "false";
	ID = "variable0";
	label = "Difficulty";
	DSLxEXTRA_DEFINITIONxDIAGNOSIS_TYPE = "AUXILIARY";
	excludepolicy = "include whole CPT";
}
node SAT
{
	states = ("state0" "state1" );
	position = (259 -89);
	diagnosistype = "AUXILIARY";
	DSLxSUBMODEL = "Root Submodel";
	ismapvariable = "false";
	ID = "variable3";
	label = "SAT";
	DSLxEXTRA_DEFINITIONxDIAGNOSIS_TYPE = "AUXILIARY";
	excludepolicy = "include whole CPT";
}
node Grade
{
	states = ("state1" "state2" "state3" );
	position = (98 -82);
	diagnosistype = "AUXILIARY";
	DSLxSUBMODEL = "Root Submodel";
	ismapvariable = "false";
	ID = "variable2";
	label = "Grade";
	DSLxEXTRA_DEFINITIONxDIAGNOSIS_TYPE = "AUXILIARY";
	excludepolicy = "include whole CPT";
}
node Letter
{
	states = ("state0" "state1" );
	position = (107 -173);
	diagnosistype = "AUXILIARY";
	DSLxSUBMODEL = "Root Submodel";
	ismapvariable = "false";
	ID = "variable4";
	label = "Letter";
	DSLxEXTRA_DEFINITIONxDIAGNOSIS_TYPE = "AUXILIARY";
	excludepolicy = "include whole CPT";
}
potential ( Intelligence | )
{
	data = (	0.7	0.3	);
}
potential ( Difficulty | )
{
	data = (	0.6	0.4	);
}
potential ( SAT | Intelligence )
{
	data = ((	0.95	0.05	)
		(	0.2	0.8	));
}
potential ( Grade | Difficulty Intelligence )
{
	data = (((	0.3	0.4	0.3	)
		(	0.9	0.08	0.02	))
		((	0.05	0.25	0.7	)
		(	0.5	0.3	0.2	)));
}
potential ( Letter | Grade )
{
	data = ((	0.1	0.9	)
		(	0.4	0.6	)
		(	0.99	0.01	));
}
